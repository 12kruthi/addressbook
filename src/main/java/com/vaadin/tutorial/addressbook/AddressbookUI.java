package com.vaadin.tutorial.addressbook;

import com.vaadin.annotations.Theme;
import com.vaadin.annotations.Title;
import com.vaadin.annotations.VaadinServletConfiguration;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.server.VaadinRequest;
import com.vaadin.server.VaadinServlet;
import com.vaadin.tutorial.addressbook.backend.Contact;
import com.vaadin.tutorial.addressbook.backend.ContactService;
import com.vaadin.ui.*;

import javax.servlet.annotation.WebServlet;

/* Define the user interface shown on the web page generated by Vaadin.
 * A new instance is automatically created for every user session.
 */

@Title("Addressbook")
@Theme("valo")
public class AddressbookUI extends UI {

    // Configure components to be used in this user interface

    private Button newContact = new Button("New contact") {{
        // Receive user interaction events and send your own events as needed.
        addClickListener(e -> editContact(new Contact()));
    }};

    private TextField filter = new TextField() {{
        setInputPrompt("Filter contacts...");
        addTextChangeListener(e -> listContacts(e.getText()));
    }};

	private Grid contactList = new Grid() {{
        setSelectionMode(Grid.SelectionMode.SINGLE);
        addSelectionListener(e
                -> editContact((Contact) contactList.getSelectedRow()));
    }};

	// ContactForm is an example of a custom component class
	private ContactForm contactForm = new ContactForm();

	/* ContactService is an in-memory mock for this example. For a real
	 * application you'd typically implement service as EJB or with Spring.
	 */
	private ContactService service = ContactService.createDemoService();


	/* This is the entry point method executed to initialize and configure
	 * the visible user interface. Executed on every browser reload because
	 * a new instance is created for each web page loaded.
	 */
	@Override
	protected void init(VaadinRequest request) {
        buildLayout();
        setupContactList();
    }

    /* Layouts are components that contain other components.
     * HorizontalLayout contains TextField and Button. It is wrapped
     * with a Grid into VerticalLayout for the left side of the screen.
     * Allow user to resize the components with a SplitPanel.
     *
     * In addition to programmatically building layout in Java,
     * you may also choose to setup layout declaratively
     * with Vaadin Designer, CSS and HTML.
     */
    private void buildLayout() {
        HorizontalLayout actions = new HorizontalLayout(filter, newContact);
        actions.setWidth("100%");
        filter.setWidth("100%");
        actions.setExpandRatio(filter, 1);

        VerticalLayout left = new VerticalLayout(actions, contactList);
        left.setSizeFull();
        contactList.setSizeFull();
        left.setExpandRatio(contactList, 1);

        // Split and allow resizing
        setContent(new HorizontalSplitPanel(left, contactForm));
    }

    /* Bind contact list to backend data-source */
    private void setupContactList() {
        contactList.setContainerDataSource(new BeanItemContainer<>(Contact.class));
        contactList.setColumnOrder("firstName", "lastName", "email");
        contactList.removeColumn("id");
        contactList.removeColumn("birthDate");
        contactList.removeColumn("phone");

        // List initial content from the back-end data source
        listContacts();
    }

    /* Embrace clean code.
     * It is good practice to have separate data access methods that
     * handle the back-end access and/or the user interface updates.
     * Further split your code into classes to easier maintenance.
     */
	private void listContacts() {
		listContacts(filter.getValue());
	}

	private void listContacts(String stringFilter) {
		contactList.setContainerDataSource(new BeanItemContainer<>(
				Contact.class, service.findAll(stringFilter)));
		contactForm.setVisible(false);
	}

	private void editContact(Contact contact) {
		if (contact != null) {
			// let the ContactForm decide how contact is edited
			contactForm.edit(contact);
		} else {
			/* Server-side code security.
			 * Components hidden in server-side code do not
			 * accept the input/updates from browser.
			 */
			// Hide the form from user
			contactForm.setVisible(false);
		}
	}


	/*
	 * The save() and deselect() methods are called by custom ContactForm when user wants to
	 * persist or reset changes to the edited contact.
	 */
	public void save(Contact contact) {
		service.save(contact);
		listContacts();
	}

	public void deselect() {
		listContacts();
		contactList.select(null);
	}

	/*  Vaadin application is deployed as a Servlet
	 *  You can specify additional servlet parameters like the URI and UI
	 *  class name and turn on production mode when you have finished developing the application.
	 */
	@WebServlet(urlPatterns = "/*")
	@VaadinServletConfiguration(ui = AddressbookUI.class, productionMode = false)
	public static class MyUIServlet extends VaadinServlet {
	}


}
